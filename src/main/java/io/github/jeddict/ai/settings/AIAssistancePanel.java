/**
 * Copyright 2025 the original author or authors from the Jeddict project (https://jeddict.github.io/).
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package io.github.jeddict.ai.settings;

import io.github.jeddict.ai.copilot.RunCopilotProxy;
import static io.github.jeddict.ai.models.Constant.DEEPINFRA_URL;
import static io.github.jeddict.ai.models.Constant.DEEPSEEK_URL;
import io.github.jeddict.ai.models.GPT4AllModelFetcher;
import io.github.jeddict.ai.models.GroqModelFetcher;
import io.github.jeddict.ai.models.LMStudioModelFetcher;
import io.github.jeddict.ai.models.OllamaModelFetcher;
import io.github.jeddict.ai.scanner.ProjectClassScanner;
import static io.github.jeddict.ai.settings.GenAIModel.MODELS;
import io.github.jeddict.ai.util.ColorUtil;
import static io.github.jeddict.ai.util.ColorUtil.darken;
import static io.github.jeddict.ai.util.ColorUtil.lighten;
import static io.github.jeddict.ai.util.EditorUtil.getBackgroundColorFromMimeType;
import static io.github.jeddict.ai.util.EditorUtil.getTextColorFromMimeType;
import static io.github.jeddict.ai.util.MimeUtil.MIME_PLAIN_TEXT;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.net.URI;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.BorderFactory;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;

final class AIAssistancePanel extends javax.swing.JPanel {

    private DefaultTableModel excludeTableModel;
    private DefaultTableModel customHeadersTableModel;
    private DefaultTableModel promptTableModel;
    private static final String DEFAULT_COPILOT_PROVIDER_LOCATION = "http://localhost:4141/v1";
    private static final Map<String, Integer> CONTEXT_OPTIONS = new LinkedHashMap<>();

    static {
        CONTEXT_OPTIONS.put("Donâ€™t include past replies", 0);
        CONTEXT_OPTIONS.put("Include last reply", 1);
        CONTEXT_OPTIONS.put("Include last 3 replies", 3);
        CONTEXT_OPTIONS.put("Include last 5 replies", 5);
        CONTEXT_OPTIONS.put("Include last 10 replies", 10);
        CONTEXT_OPTIONS.put("Include entire conversation", -1);
    }

    AIAssistancePanel() {
        initComponents();
        populateContextCombo(conversationContext, "Last 3 replies");
        int index = jTabbedPane1.indexOfComponent(backupPane);
        if (index != -1) {
            jTabbedPane1.removeTabAt(index);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aiInlineCompletionShortcutGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        providersPane = new javax.swing.JLayeredPane();
        providerParentPane = new javax.swing.JLayeredPane();
        providerPane = new javax.swing.JLayeredPane();
        providerLabel = new javax.swing.JLabel();
        providerComboBox = new javax.swing.JComboBox<>();
        providerLocationPane = new javax.swing.JLayeredPane();
        providerLocationLabel = new javax.swing.JLabel();
        providerLocationField = new javax.swing.JTextField();
        apiKeyPane = new javax.swing.JLayeredPane();
        apiKeyLabelPane = new javax.swing.JLayeredPane();
        apiKeyLabel = new javax.swing.JLabel();
        apiKeyInfo = new javax.swing.JLabel();
        apiKeyField = new javax.swing.JPasswordField();
        modelParentPane = new javax.swing.JLayeredPane();
        modelLabelPane = new javax.swing.JLayeredPane();
        gptModelLabel = new javax.swing.JLabel();
        gptModelHelp = new javax.swing.JLabel();
        modelChildPane = new javax.swing.JLayeredPane();
        modelComboBox = new javax.swing.JComboBox<>();
        modelsInfo = new javax.swing.JLabel();
        activationParentPane = new javax.swing.JLayeredPane();
        activationPane = new javax.swing.JLayeredPane();
        aiAssistantActivationCheckBox = new javax.swing.JCheckBox();
        enableSmartCodeCheckBox = new javax.swing.JCheckBox();
        enableHintsCheckBox = new javax.swing.JCheckBox();
        enableInlineHintCheckBox = new javax.swing.JCheckBox();
        enableInlinePromptHintCheckBox = new javax.swing.JCheckBox();
        providerSettingsPane = new javax.swing.JLayeredPane();
        providerSettingsChildPane = new javax.swing.JLayeredPane();
        providerSettingsParentPane1 = new javax.swing.JLayeredPane();
        temperaturePane = new javax.swing.JLayeredPane();
        temperatureLabel = new javax.swing.JLabel();
        temperature = new javax.swing.JTextField();
        timeoutPane = new javax.swing.JLayeredPane();
        timeoutLabel = new javax.swing.JLabel();
        timeout = new javax.swing.JTextField();
        topPPane = new javax.swing.JLayeredPane();
        topPLabel = new javax.swing.JLabel();
        topP = new javax.swing.JTextField();
        commonSettingsParentPane1 = new javax.swing.JLayeredPane();
        maxRetriesPane = new javax.swing.JLayeredPane();
        maxRetriesLabel = new javax.swing.JLabel();
        maxRetries = new javax.swing.JTextField();
        maxOutputTokensPane = new javax.swing.JLayeredPane();
        maxOutputTokensLabel = new javax.swing.JLabel();
        maxOutputTokens = new javax.swing.JTextField();
        repeatPenaltyPane = new javax.swing.JLayeredPane();
        repeatPenaltyLabel = new javax.swing.JLabel();
        repeatPenalty = new javax.swing.JTextField();
        seedPane = new javax.swing.JLayeredPane();
        seedLabel = new javax.swing.JLabel();
        seed = new javax.swing.JTextField();
        maxTokensPane = new javax.swing.JLayeredPane();
        maxTokensLabel = new javax.swing.JLabel();
        maxTokens = new javax.swing.JTextField();
        maxCompletionTokensPane = new javax.swing.JLayeredPane();
        maxCompletionTokensLabel = new javax.swing.JLabel();
        maxCompletionTokens = new javax.swing.JTextField();
        topKPane = new javax.swing.JLayeredPane();
        topKLabel = new javax.swing.JLabel();
        topK = new javax.swing.JTextField();
        openAISettingsParentPane1 = new javax.swing.JLayeredPane();
        presencePenaltyPane = new javax.swing.JLayeredPane();
        presencePenaltyLabel = new javax.swing.JLabel();
        presencePenalty = new javax.swing.JTextField();
        frequencyPenaltyPane = new javax.swing.JLayeredPane();
        frequencyPenaltyLabel = new javax.swing.JLabel();
        frequencyPenalty = new javax.swing.JTextField();
        organizationIdPane = new javax.swing.JLayeredPane();
        organizationIdLabel = new javax.swing.JLabel();
        organizationId = new javax.swing.JTextField();
        providerSettingsParentPane3 = new javax.swing.JLayeredPane();
        stream = new javax.swing.JCheckBox();
        logRequests = new javax.swing.JCheckBox();
        logResponses = new javax.swing.JCheckBox();
        includeCodeExecutionOutput = new javax.swing.JCheckBox();
        allowCodeExecution = new javax.swing.JCheckBox();
        customHeadersPane = new javax.swing.JLayeredPane();
        customHeadersScrollPane = new javax.swing.JScrollPane();
        customHeadersTable = new javax.swing.JTable();
        askAIPane = new javax.swing.JLayeredPane();
        fileFilterationPane = new javax.swing.JLayeredPane();
        fileExtLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        fileExtField = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        jLayeredPane7 = new javax.swing.JLayeredPane();
        submitShortcut = new javax.swing.JComboBox<>();
        submitShortcutLabel = new javax.swing.JLabel();
        jLayeredPane4 = new javax.swing.JLayeredPane();
        defaultAIAssistantPlacement = new javax.swing.JComboBox<>();
        defaultAIAssistantPlacementLabel = new javax.swing.JLabel();
        jLayeredPane6 = new javax.swing.JLayeredPane();
        conversationContext = new javax.swing.JComboBox<>();
        conversationContextLabel = new javax.swing.JLabel();
        jLayeredPane5 = new javax.swing.JLayeredPane();
        excludeJavadocCommentsCheckBox = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        excludeDirTable = new javax.swing.JTable();
        inlineCompletionPane = new javax.swing.JLayeredPane();
        classContextPane = new javax.swing.JLayeredPane();
        classContextLabelPane = new javax.swing.JLayeredPane();
        classContextLabel = new javax.swing.JLabel();
        classContextHelp = new javax.swing.JLabel();
        classContextComboBox = new javax.swing.JComboBox<>();
        varContextPane = new javax.swing.JLayeredPane();
        classContextLabelPane1 = new javax.swing.JLayeredPane();
        varContextLabel = new javax.swing.JLabel();
        varContextHelp = new javax.swing.JLabel();
        varContextComboBox = new javax.swing.JComboBox<>();
        snippetPane1 = new javax.swing.JLayeredPane();
        aiInlineCompletionShortcutLabel = new javax.swing.JLabel();
        ctrlSpaceRadioButton = new javax.swing.JRadioButton();
        ctrlAltSpaceRadioButton = new javax.swing.JRadioButton();
        snippetPane = new javax.swing.JLayeredPane();
        showDescriptionCheckBox = new javax.swing.JCheckBox();
        cachePane = new javax.swing.JLayeredPane();
        cleanDataButton = new javax.swing.JButton();
        inlineHintPane = new javax.swing.JLayeredPane();
        classContextInlineHintPane = new javax.swing.JLayeredPane();
        classContextInlineHintLabelPane = new javax.swing.JLayeredPane();
        classContextLabel1 = new javax.swing.JLabel();
        classContextHelp1 = new javax.swing.JLabel();
        classContextInlineHintComboBox = new javax.swing.JComboBox<>();
        globalRulesPane = new javax.swing.JLayeredPane();
        globalRulesScrollPane = new javax.swing.JScrollPane();
        globalRules = new javax.swing.JTextArea();
        promptSettingsPane = new javax.swing.JLayeredPane();
        promptScrollPane = new javax.swing.JScrollPane();
        promptTable = new javax.swing.JTable();
        backupPane = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        importButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        providersPane.setLayout(new java.awt.GridLayout(6, 1));

        providerParentPane.setLayout(new javax.swing.BoxLayout(providerParentPane, javax.swing.BoxLayout.LINE_AXIS));

        providerPane.setLayout(new java.awt.GridLayout(0, 1));

        org.openide.awt.Mnemonics.setLocalizedText(providerLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.providerLabel.text")); // NOI18N
        providerPane.add(providerLabel);

        providerComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(GenAIProvider.values()));
        providerComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.providerComboBox.toolTipText")); // NOI18N
        providerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                providerComboBoxActionPerformed(evt);
            }
        });
        providerPane.add(providerComboBox);

        providerParentPane.add(providerPane);

        providerLocationPane.setLayout(new java.awt.GridLayout(0, 1));

        org.openide.awt.Mnemonics.setLocalizedText(providerLocationLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.providerLocationLabel.text")); // NOI18N
        providerLocationLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.providerLocationLabel.toolTipText")); // NOI18N
        providerLocationPane.add(providerLocationLabel);

        providerLocationField.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.providerLocationField.text")); // NOI18N
        providerLocationField.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.providerLocationField.toolTipText")); // NOI18N
        providerLocationPane.add(providerLocationField);

        providerParentPane.add(providerLocationPane);

        apiKeyPane.setLayout(new java.awt.GridLayout(0, 1));

        apiKeyLabelPane.setLayout(new java.awt.GridLayout(1, 0));

        org.openide.awt.Mnemonics.setLocalizedText(apiKeyLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.apiKeyLabel.text")); // NOI18N
        apiKeyLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.apiKeyLabel.toolTipText")); // NOI18N
        apiKeyLabelPane.add(apiKeyLabel);

        apiKeyInfo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(apiKeyInfo, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.apiKeyInfo.text")); // NOI18N
        apiKeyLabelPane.add(apiKeyInfo);

        apiKeyPane.add(apiKeyLabelPane);

        apiKeyField.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.apiKeyField.text")); // NOI18N
        apiKeyField.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.apiKeyField.toolTipText")); // NOI18N
        apiKeyField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                apiKeyFieldFocusLost(evt);
            }
        });
        apiKeyPane.add(apiKeyField);

        providerParentPane.add(apiKeyPane);

        providersPane.add(providerParentPane);

        modelParentPane.setLayout(new java.awt.GridLayout(2, 1));

        modelLabelPane.setLayout(new javax.swing.BoxLayout(modelLabelPane, javax.swing.BoxLayout.LINE_AXIS));

        org.openide.awt.Mnemonics.setLocalizedText(gptModelLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.gptModelLabel.text")); // NOI18N
        gptModelLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.gptModelLabel.toolTipText")); // NOI18N
        modelLabelPane.add(gptModelLabel);

        gptModelHelp.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        gptModelHelp.setForeground(new java.awt.Color(100, 100, 100));
        gptModelHelp.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(gptModelHelp, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.gptModelHelp.text")); // NOI18N
        modelLabelPane.add(gptModelHelp);

        modelParentPane.add(modelLabelPane);

        modelChildPane.setLayout(new java.awt.GridLayout(1, 2));

        modelComboBox.setEditable(true);
        modelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(getModelList((GenAIProvider)providerComboBox.getSelectedItem()).toArray(new String[0])));
        modelComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.modelComboBox.toolTipText")); // NOI18N
        modelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelComboBoxActionPerformed(evt);
            }
        });
        modelChildPane.add(modelComboBox);

        modelsInfo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(modelsInfo, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.modelsInfo.text")); // NOI18N
        modelChildPane.add(modelsInfo);

        modelParentPane.add(modelChildPane);

        providersPane.add(modelParentPane);

        activationParentPane.setLayout(new java.awt.GridLayout(2, 0));

        activationPane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        org.openide.awt.Mnemonics.setLocalizedText(aiAssistantActivationCheckBox, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.aiAssistantActivationCheckBox.text")); // NOI18N
        aiAssistantActivationCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.aiAssistantActivationCheckBox.toolTipText")); // NOI18N
        aiAssistantActivationCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aiAssistantActivationCheckBoxActionPerformed(evt);
            }
        });
        activationPane.add(aiAssistantActivationCheckBox);

        org.openide.awt.Mnemonics.setLocalizedText(enableSmartCodeCheckBox, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.enableSmartCodeCheckBox.text")); // NOI18N
        enableSmartCodeCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.enableSmartCodeCheckBox.toolTipText")); // NOI18N
        activationPane.add(enableSmartCodeCheckBox);

        org.openide.awt.Mnemonics.setLocalizedText(enableHintsCheckBox, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.enableHintsCheckBox.text")); // NOI18N
        enableHintsCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.enableHintsCheckBox.toolTipText")); // NOI18N
        enableHintsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableHintsCheckBoxActionPerformed(evt);
            }
        });
        activationPane.add(enableHintsCheckBox);

        org.openide.awt.Mnemonics.setLocalizedText(enableInlineHintCheckBox, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.enableInlineHintCheckBox.text")); // NOI18N
        enableInlineHintCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.enableInlineHintCheckBox.toolTipText")); // NOI18N
        enableInlineHintCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableInlineHintCheckBoxActionPerformed(evt);
            }
        });
        activationPane.add(enableInlineHintCheckBox);

        org.openide.awt.Mnemonics.setLocalizedText(enableInlinePromptHintCheckBox, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.enableInlinePromptHintCheckBox.text")); // NOI18N
        enableInlinePromptHintCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.enableInlinePromptHintCheckBox.toolTipText")); // NOI18N
        activationPane.add(enableInlinePromptHintCheckBox);

        activationParentPane.add(activationPane);

        providersPane.add(activationParentPane);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.providersPane.TabConstraints.tabTitle"), providersPane); // NOI18N

        providerSettingsPane.setLayout(new java.awt.GridLayout(2, 1));

        providerSettingsChildPane.setLayout(new java.awt.GridLayout(4, 1));

        providerSettingsParentPane1.setLayout(new javax.swing.BoxLayout(providerSettingsParentPane1, javax.swing.BoxLayout.LINE_AXIS));

        temperaturePane.setLayout(new java.awt.GridLayout(0, 1));

        org.openide.awt.Mnemonics.setLocalizedText(temperatureLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.temperatureLabel.text")); // NOI18N
        temperatureLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.temperatureLabel.toolTipText")); // NOI18N
        temperaturePane.add(temperatureLabel);

        temperature.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.temperature.text")); // NOI18N
        temperature.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.temperature.toolTipText")); // NOI18N
        temperaturePane.add(temperature);

        providerSettingsParentPane1.add(temperaturePane);

        timeoutPane.setLayout(new java.awt.GridLayout(0, 1));

        org.openide.awt.Mnemonics.setLocalizedText(timeoutLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.timeoutLabel.text")); // NOI18N
        timeoutLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.timeoutLabel.toolTipText")); // NOI18N
        timeoutPane.add(timeoutLabel);

        timeout.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.timeout.text")); // NOI18N
        timeout.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.timeout.toolTipText")); // NOI18N
        timeout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeoutActionPerformed(evt);
            }
        });
        timeoutPane.add(timeout);

        providerSettingsParentPane1.add(timeoutPane);

        topPPane.setLayout(new java.awt.GridLayout(0, 1));

        org.openide.awt.Mnemonics.setLocalizedText(topPLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.topPLabel.text")); // NOI18N
        topPLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.topPLabel.toolTipText")); // NOI18N
        topPPane.add(topPLabel);

        topP.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.topP.text")); // NOI18N
        topP.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.topP.toolTipText")); // NOI18N
        topPPane.add(topP);

        providerSettingsParentPane1.add(topPPane);

        providerSettingsChildPane.add(providerSettingsParentPane1);

        commonSettingsParentPane1.setLayout(new javax.swing.BoxLayout(commonSettingsParentPane1, javax.swing.BoxLayout.LINE_AXIS));

        maxRetriesPane.setLayout(new java.awt.GridLayout(0, 1));

        org.openide.awt.Mnemonics.setLocalizedText(maxRetriesLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.maxRetriesLabel.text")); // NOI18N
        maxRetriesLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.maxRetriesLabel.toolTipText")); // NOI18N
        maxRetriesPane.add(maxRetriesLabel);

        maxRetries.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.maxRetries.text")); // NOI18N
        maxRetries.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.maxRetries.toolTipText")); // NOI18N
        maxRetriesPane.add(maxRetries);

        commonSettingsParentPane1.add(maxRetriesPane);

        maxOutputTokensPane.setLayout(new java.awt.GridLayout(0, 1));

        org.openide.awt.Mnemonics.setLocalizedText(maxOutputTokensLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.maxOutputTokensLabel.text")); // NOI18N
        maxOutputTokensLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.maxOutputTokensLabel.toolTipText")); // NOI18N
        maxOutputTokensPane.add(maxOutputTokensLabel);

        maxOutputTokens.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.maxOutputTokens.text")); // NOI18N
        maxOutputTokens.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.maxOutputTokens.toolTipText")); // NOI18N
        maxOutputTokensPane.add(maxOutputTokens);

        commonSettingsParentPane1.add(maxOutputTokensPane);

        repeatPenaltyPane.setLayout(new java.awt.GridLayout(0, 1));

        org.openide.awt.Mnemonics.setLocalizedText(repeatPenaltyLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.repeatPenaltyLabel.text")); // NOI18N
        repeatPenaltyLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.repeatPenaltyLabel.toolTipText")); // NOI18N
        repeatPenaltyPane.add(repeatPenaltyLabel);

        repeatPenalty.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.repeatPenalty.text")); // NOI18N
        repeatPenalty.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.repeatPenalty.toolTipText")); // NOI18N
        repeatPenaltyPane.add(repeatPenalty);

        commonSettingsParentPane1.add(repeatPenaltyPane);

        seedPane.setLayout(new java.awt.GridLayout(0, 1));

        org.openide.awt.Mnemonics.setLocalizedText(seedLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.seedLabel.text")); // NOI18N
        seedLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.seedLabel.toolTipText")); // NOI18N
        seedPane.add(seedLabel);

        seed.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.seed.text")); // NOI18N
        seed.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.seed.toolTipText")); // NOI18N
        seedPane.add(seed);

        commonSettingsParentPane1.add(seedPane);

        maxTokensPane.setLayout(new java.awt.GridLayout(0, 1));

        org.openide.awt.Mnemonics.setLocalizedText(maxTokensLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.maxTokensLabel.text")); // NOI18N
        maxTokensLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.maxTokensLabel.toolTipText")); // NOI18N
        maxTokensPane.add(maxTokensLabel);

        maxTokens.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.maxTokens.text")); // NOI18N
        maxTokens.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.maxTokens.toolTipText")); // NOI18N
        maxTokensPane.add(maxTokens);

        commonSettingsParentPane1.add(maxTokensPane);

        maxCompletionTokensPane.setLayout(new java.awt.GridLayout(0, 1));

        org.openide.awt.Mnemonics.setLocalizedText(maxCompletionTokensLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.maxCompletionTokensLabel.text")); // NOI18N
        maxCompletionTokensLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.maxCompletionTokensLabel.toolTipText")); // NOI18N
        maxCompletionTokensPane.add(maxCompletionTokensLabel);

        maxCompletionTokens.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.maxCompletionTokens.text")); // NOI18N
        maxCompletionTokens.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.maxCompletionTokens.toolTipText")); // NOI18N
        maxCompletionTokensPane.add(maxCompletionTokens);

        commonSettingsParentPane1.add(maxCompletionTokensPane);

        topKPane.setLayout(new java.awt.GridLayout(0, 1));

        org.openide.awt.Mnemonics.setLocalizedText(topKLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.topKLabel.text")); // NOI18N
        topKLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.topKLabel.toolTipText")); // NOI18N
        topKPane.add(topKLabel);

        topK.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.topK.text")); // NOI18N
        topK.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.topK.toolTipText")); // NOI18N
        topKPane.add(topK);

        commonSettingsParentPane1.add(topKPane);

        providerSettingsChildPane.add(commonSettingsParentPane1);

        openAISettingsParentPane1.setLayout(new javax.swing.BoxLayout(openAISettingsParentPane1, javax.swing.BoxLayout.LINE_AXIS));

        presencePenaltyPane.setLayout(new java.awt.GridLayout(0, 1));

        org.openide.awt.Mnemonics.setLocalizedText(presencePenaltyLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.presencePenaltyLabel.text")); // NOI18N
        presencePenaltyLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.presencePenaltyLabel.toolTipText")); // NOI18N
        presencePenaltyPane.add(presencePenaltyLabel);

        presencePenalty.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.presencePenalty.text")); // NOI18N
        presencePenalty.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.presencePenalty.toolTipText")); // NOI18N
        presencePenaltyPane.add(presencePenalty);

        openAISettingsParentPane1.add(presencePenaltyPane);

        frequencyPenaltyPane.setLayout(new java.awt.GridLayout(0, 1));

        org.openide.awt.Mnemonics.setLocalizedText(frequencyPenaltyLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.frequencyPenaltyLabel.text")); // NOI18N
        frequencyPenaltyLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.frequencyPenaltyLabel.toolTipText")); // NOI18N
        frequencyPenaltyPane.add(frequencyPenaltyLabel);

        frequencyPenalty.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.frequencyPenalty.text")); // NOI18N
        frequencyPenalty.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.frequencyPenalty.toolTipText")); // NOI18N
        frequencyPenaltyPane.add(frequencyPenalty);

        openAISettingsParentPane1.add(frequencyPenaltyPane);

        organizationIdPane.setLayout(new java.awt.GridLayout(0, 1));

        org.openide.awt.Mnemonics.setLocalizedText(organizationIdLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.organizationIdLabel.text")); // NOI18N
        organizationIdLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.organizationIdLabel.toolTipText")); // NOI18N
        organizationIdPane.add(organizationIdLabel);

        organizationId.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.organizationId.text")); // NOI18N
        organizationId.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.organizationId.toolTipText")); // NOI18N
        organizationIdPane.add(organizationId);

        openAISettingsParentPane1.add(organizationIdPane);

        providerSettingsChildPane.add(openAISettingsParentPane1);

        providerSettingsParentPane3.setLayout(new java.awt.FlowLayout());

        stream.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(stream, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.stream.text")); // NOI18N
        providerSettingsParentPane3.add(stream);

        org.openide.awt.Mnemonics.setLocalizedText(logRequests, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.logRequests.text")); // NOI18N
        logRequests.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.logRequests.toolTipText")); // NOI18N
        providerSettingsParentPane3.add(logRequests);

        org.openide.awt.Mnemonics.setLocalizedText(logResponses, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.logResponses.text")); // NOI18N
        logResponses.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.logResponses.toolTipText")); // NOI18N
        providerSettingsParentPane3.add(logResponses);

        org.openide.awt.Mnemonics.setLocalizedText(includeCodeExecutionOutput, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.includeCodeExecutionOutput.text")); // NOI18N
        includeCodeExecutionOutput.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.includeCodeExecutionOutput.toolTipText")); // NOI18N
        providerSettingsParentPane3.add(includeCodeExecutionOutput);

        org.openide.awt.Mnemonics.setLocalizedText(allowCodeExecution, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.allowCodeExecution.text")); // NOI18N
        allowCodeExecution.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.allowCodeExecution.toolTipText")); // NOI18N
        allowCodeExecution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allowCodeExecutionActionPerformed(evt);
            }
        });
        providerSettingsParentPane3.add(allowCodeExecution);

        providerSettingsChildPane.add(providerSettingsParentPane3);

        providerSettingsPane.add(providerSettingsChildPane);

        customHeadersTable.setModel(getHeaderKeyValueTableModel());
        customHeadersTable.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.customHeadersTable.toolTipText")); // NOI18N
        customHeadersScrollPane.setViewportView(customHeadersTable);

        customHeadersPane.setLayer(customHeadersScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout customHeadersPaneLayout = new javax.swing.GroupLayout(customHeadersPane);
        customHeadersPane.setLayout(customHeadersPaneLayout);
        customHeadersPaneLayout.setHorizontalGroup(
            customHeadersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
            .addGroup(customHeadersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(customHeadersPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(customHeadersScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        customHeadersPaneLayout.setVerticalGroup(
            customHeadersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 211, Short.MAX_VALUE)
            .addGroup(customHeadersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customHeadersPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(customHeadersScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)))
        );

        providerSettingsPane.add(customHeadersPane);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.providerSettingsPane.TabConstraints.tabTitle"), providerSettingsPane); // NOI18N

        askAIPane.setLayout(new javax.swing.BoxLayout(askAIPane, javax.swing.BoxLayout.Y_AXIS));

        fileFilterationPane.setMinimumSize(new java.awt.Dimension(130, 40));
        fileFilterationPane.setPreferredSize(new java.awt.Dimension(125, 200));

        fileExtLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        org.openide.awt.Mnemonics.setLocalizedText(fileExtLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.fileExtLabel.text")); // NOI18N
        fileExtLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        fileExtLabel.setMinimumSize(new java.awt.Dimension(122, 10));
        fileExtLabel.setPreferredSize(new java.awt.Dimension(122, 20));

        fileExtField.setColumns(20);
        fileExtField.setRows(5);
        fileExtField.setText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.fileExtField.text")); // NOI18N
        jScrollPane3.setViewportView(fileExtField);

        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.jLabel1.text")); // NOI18N

        fileFilterationPane.setLayer(fileExtLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        fileFilterationPane.setLayer(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        fileFilterationPane.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout fileFilterationPaneLayout = new javax.swing.GroupLayout(fileFilterationPane);
        fileFilterationPane.setLayout(fileFilterationPaneLayout);
        fileFilterationPaneLayout.setHorizontalGroup(
            fileFilterationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(fileFilterationPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileExtLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        fileFilterationPaneLayout.setVerticalGroup(
            fileFilterationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileFilterationPaneLayout.createSequentialGroup()
                .addGroup(fileFilterationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileExtLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        askAIPane.add(fileFilterationPane);

        jLayeredPane2.setLayout(new java.awt.GridLayout(1, 2, 5, 0));

        jLayeredPane3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLayeredPane7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        submitShortcut.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ctrl + Enter", "Enter", "Shift + Enter"}));
        jLayeredPane7.add(submitShortcut);

        org.openide.awt.Mnemonics.setLocalizedText(submitShortcutLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.submitShortcutLabel.text")); // NOI18N
        jLayeredPane7.add(submitShortcutLabel);

        jLayeredPane3.add(jLayeredPane7);

        jLayeredPane4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        defaultAIAssistantPlacement.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Left", "Center", "Right" }));
        jLayeredPane4.add(defaultAIAssistantPlacement);

        org.openide.awt.Mnemonics.setLocalizedText(defaultAIAssistantPlacementLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.defaultAIAssistantPlacementLabel.text")); // NOI18N
        jLayeredPane4.add(defaultAIAssistantPlacementLabel);

        jLayeredPane3.add(jLayeredPane4);

        jLayeredPane6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        conversationContext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conversationContextActionPerformed(evt);
            }
        });
        jLayeredPane6.add(conversationContext);

        org.openide.awt.Mnemonics.setLocalizedText(conversationContextLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.conversationContextLabel.text")); // NOI18N
        conversationContextLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.conversationContextLabel.toolTipText")); // NOI18N
        jLayeredPane6.add(conversationContextLabel);

        jLayeredPane3.add(jLayeredPane6);

        jLayeredPane5.setLayout(new java.awt.FlowLayout());

        org.openide.awt.Mnemonics.setLocalizedText(excludeJavadocCommentsCheckBox, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.excludeJavadocCommentsCheckBox.text")); // NOI18N
        excludeJavadocCommentsCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.excludeJavadocCommentsCheckBox.toolTipText")); // NOI18N
        excludeJavadocCommentsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excludeJavadocCommentsCheckBoxActionPerformed(evt);
            }
        });
        jLayeredPane5.add(excludeJavadocCommentsCheckBox);

        jLayeredPane3.add(jLayeredPane5);

        jLayeredPane2.add(jLayeredPane3);

        excludeDirTable.setModel(getExcludeTableModel());
        jScrollPane2.setViewportView(excludeDirTable);

        jLayeredPane2.add(jScrollPane2);

        askAIPane.add(jLayeredPane2);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.askAIPane.TabConstraints.tabTitle"), askAIPane); // NOI18N

        inlineCompletionPane.setLayout(new java.awt.GridLayout(5, 1));

        classContextPane.setPreferredSize(new java.awt.Dimension(125, 75));
        classContextPane.setLayout(new java.awt.GridLayout(0, 1, 5, 0));

        classContextLabelPane.setPreferredSize(new java.awt.Dimension(125, 40));
        classContextLabelPane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 5));

        classContextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(classContextLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.classContextLabel.text")); // NOI18N
        classContextLabelPane.add(classContextLabel);

        classContextHelp.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        classContextHelp.setForeground(new java.awt.Color(100, 100, 100));
        classContextHelp.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(classContextHelp, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.classContextHelp.text")); // NOI18N
        classContextLabelPane.add(classContextHelp);

        classContextPane.add(classContextLabelPane);

        classContextComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(AIClassContext.values()));
        classContextComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.classContextComboBox.toolTipText")); // NOI18N
        classContextComboBox.setPreferredSize(new java.awt.Dimension(72, 35));
        classContextComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classContextComboBoxActionPerformed(evt);
            }
        });
        classContextPane.add(classContextComboBox);

        inlineCompletionPane.add(classContextPane);

        varContextPane.setPreferredSize(new java.awt.Dimension(125, 75));
        varContextPane.setLayout(new java.awt.GridLayout(0, 1, 5, 0));

        classContextLabelPane1.setPreferredSize(new java.awt.Dimension(125, 40));
        classContextLabelPane1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 5));

        varContextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(varContextLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.varContextLabel.text")); // NOI18N
        classContextLabelPane1.add(varContextLabel);

        varContextHelp.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        varContextHelp.setForeground(new java.awt.Color(100, 100, 100));
        varContextHelp.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(varContextHelp, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.varContextHelp.text")); // NOI18N
        classContextLabelPane1.add(varContextHelp);

        varContextPane.add(classContextLabelPane1);

        varContextComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(AIClassContext.values()));
        varContextComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.varContextComboBox.toolTipText")); // NOI18N
        varContextComboBox.setPreferredSize(new java.awt.Dimension(72, 35));
        varContextComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                varContextComboBoxActionPerformed(evt);
            }
        });
        varContextPane.add(varContextComboBox);

        inlineCompletionPane.add(varContextPane);

        snippetPane1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        org.openide.awt.Mnemonics.setLocalizedText(aiInlineCompletionShortcutLabel, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.aiInlineCompletionShortcutLabel.text")); // NOI18N
        aiInlineCompletionShortcutLabel.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.aiInlineCompletionShortcut.toolTipText")); // NOI18N
        snippetPane1.add(aiInlineCompletionShortcutLabel);

        aiInlineCompletionShortcutGroup.add(ctrlSpaceRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(ctrlSpaceRadioButton, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.ctrlSpaceRadioButton.text")); // NOI18N
        ctrlSpaceRadioButton.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.aiInlineCompletionShortcut.toolTipText")); // NOI18N
        snippetPane1.add(ctrlSpaceRadioButton);

        aiInlineCompletionShortcutGroup.add(ctrlAltSpaceRadioButton);
        ctrlAltSpaceRadioButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(ctrlAltSpaceRadioButton, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.ctrlAltSpaceRadioButton.text")); // NOI18N
        ctrlAltSpaceRadioButton.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.aiInlineCompletionShortcut.toolTipText")); // NOI18N
        snippetPane1.add(ctrlAltSpaceRadioButton);

        inlineCompletionPane.add(snippetPane1);

        snippetPane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        org.openide.awt.Mnemonics.setLocalizedText(showDescriptionCheckBox, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.showDescriptionCheckBox.text")); // NOI18N
        showDescriptionCheckBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.showDescriptionCheckBox.toolTipText")); // NOI18N
        showDescriptionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showDescriptionCheckBoxActionPerformed(evt);
            }
        });
        snippetPane.add(showDescriptionCheckBox);

        inlineCompletionPane.add(snippetPane);

        cachePane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        org.openide.awt.Mnemonics.setLocalizedText(cleanDataButton, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.cleanDataButton.text")); // NOI18N
        cleanDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanDataButtonActionPerformed(evt);
            }
        });
        cachePane.add(cleanDataButton);

        inlineCompletionPane.add(cachePane);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.inlineCompletionPane.TabConstraints.tabTitle"), inlineCompletionPane); // NOI18N

        inlineHintPane.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        classContextInlineHintPane.setPreferredSize(new java.awt.Dimension(125, 75));
        classContextInlineHintPane.setLayout(new java.awt.GridLayout(0, 1, 5, 0));

        classContextInlineHintLabelPane.setPreferredSize(new java.awt.Dimension(125, 40));
        classContextInlineHintLabelPane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 5));

        classContextLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(classContextLabel1, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.classContextLabel1.text")); // NOI18N
        classContextInlineHintLabelPane.add(classContextLabel1);

        classContextHelp1.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        classContextHelp1.setForeground(new java.awt.Color(100, 100, 100));
        classContextHelp1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(classContextHelp1, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.classContextHelp1.text")); // NOI18N
        classContextInlineHintLabelPane.add(classContextHelp1);

        classContextInlineHintPane.add(classContextInlineHintLabelPane);

        classContextInlineHintComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(AIClassContext.values()));
        classContextInlineHintComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.classContextInlineHintComboBox.toolTipText")); // NOI18N
        classContextInlineHintComboBox.setPreferredSize(new java.awt.Dimension(72, 35));
        classContextInlineHintComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classContextInlineHintComboBoxActionPerformed(evt);
            }
        });
        classContextInlineHintPane.add(classContextInlineHintComboBox);

        inlineHintPane.add(classContextInlineHintPane);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.inlineHintPane.TabConstraints.tabTitle"), inlineHintPane); // NOI18N

        globalRulesPane.setLayout(new java.awt.BorderLayout());

        globalRules.setColumns(20);
        globalRules.setRows(5);
        globalRulesScrollPane.setViewportView(globalRules);

        globalRulesPane.add(globalRulesScrollPane, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.globalRulesPane.TabConstraints.tabTitle"), globalRulesPane); // NOI18N

        promptSettingsPane.setLayout(new java.awt.BorderLayout());

        promptTable.setModel(getPromptTableModel());
        promptTable.setToolTipText(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.promptTable.toolTipText")); // NOI18N
        promptScrollPane.setViewportView(promptTable);

        promptSettingsPane.add(promptScrollPane, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.promptSettingsPane.TabConstraints.tabTitle"), promptSettingsPane); // NOI18N

        backupPane.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(importButton, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.importButton.text")); // NOI18N
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(exportButton, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.exportButton.text")); // NOI18N
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.jLabel3.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(importButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(exportButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(importButton)
                    .addComponent(jLabel3))
                .addContainerGap(337, Short.MAX_VALUE))
        );

        backupPane.add(jPanel1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.backupPane.TabConstraints.tabTitle"), backupPane); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cleanDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanDataButtonActionPerformed
        ProjectClassScanner.clear();
        JOptionPane.showMessageDialog(this, "Cache has been cleared successfully!", "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_cleanDataButtonActionPerformed

    private void showDescriptionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showDescriptionCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showDescriptionCheckBoxActionPerformed

    private void varContextComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_varContextComboBoxActionPerformed
        AIClassContext selectedContext = (AIClassContext) varContextComboBox.getSelectedItem();
        if (selectedContext != null) {
            varContextHelp.setText(selectedContext.getDescription());
        }
    }//GEN-LAST:event_varContextComboBoxActionPerformed

    private void populateContextCombo(JComboBox<String> combo, String defaultLabel) {
        combo.removeAllItems();
        for (String label : CONTEXT_OPTIONS.keySet()) {
            combo.addItem(label);
        }
        combo.setSelectedItem(defaultLabel);
    }
        
    private void classContextComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classContextComboBoxActionPerformed
        AIClassContext selectedContext = (AIClassContext) classContextComboBox.getSelectedItem();
        if (selectedContext != null) {
            classContextHelp.setText(selectedContext.getDescription());
        }
    }//GEN-LAST:event_classContextComboBoxActionPerformed

    private void excludeJavadocCommentsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excludeJavadocCommentsCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_excludeJavadocCommentsCheckBoxActionPerformed

    private void enableHintsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableHintsCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enableHintsCheckBoxActionPerformed

    private void aiAssistantActivationCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aiAssistantActivationCheckBoxActionPerformed
        // if unchecked then disable the hint and smart checkbox
        if (!aiAssistantActivationCheckBox.isSelected()) {
            enableHintsCheckBox.setEnabled(false);
            enableSmartCodeCheckBox.setEnabled(false);
            enableInlineHintCheckBox.setEnabled(false);
            enableInlinePromptHintCheckBox.setEnabled(false);
            enableHintsCheckBox.setSelected(false);
            enableSmartCodeCheckBox.setSelected(false);
            enableInlineHintCheckBox.setSelected(false);
            enableInlinePromptHintCheckBox.setSelected(false);
        } else {
            enableHintsCheckBox.setEnabled(true);
            enableSmartCodeCheckBox.setEnabled(true);
            enableInlineHintCheckBox.setEnabled(true);
            enableInlinePromptHintCheckBox.setEnabled(true);
            enableHintsCheckBox.setSelected(true);
            enableSmartCodeCheckBox.setSelected(true);
            enableInlineHintCheckBox.setSelected(true);
            enableInlinePromptHintCheckBox.setSelected(true);
        }
    }//GEN-LAST:event_aiAssistantActivationCheckBoxActionPerformed

    private void modelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelComboBoxActionPerformed
        String selectedContext = (String) modelComboBox.getSelectedItem();
        if (selectedContext != null && getModel(selectedContext) != null) {
            gptModelHelp.setText(getModel(selectedContext).getDescription());
        } else {
            gptModelHelp.setText("");
        }
    }//GEN-LAST:event_modelComboBoxActionPerformed

    private void apiKeyFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_apiKeyFieldFocusLost
        GenAIProvider selectedProvider = (GenAIProvider) providerComboBox.getSelectedItem();
        if (selectedProvider != null) {
            updateModelComboBox(selectedProvider);
        }
    }//GEN-LAST:event_apiKeyFieldFocusLost

    private void providerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_providerComboBoxActionPerformed
        GenAIProvider selectedProvider = (GenAIProvider) providerComboBox.getSelectedItem();
        if (selectedProvider == GenAIProvider.DEEPINFRA
                || selectedProvider == GenAIProvider.DEEPSEEK
                || selectedProvider == GenAIProvider.GROQ
                || selectedProvider == GenAIProvider.CUSTOM_OPEN_AI) {
            apiKeyLabel.setVisible(true);
            apiKeyField.setVisible(true);
            apiKeyPane.setVisible(true);
            providerLocationLabel.setVisible(true);
            if (selectedProvider == GenAIProvider.DEEPINFRA) {
                providerLocationField.setText(DEEPINFRA_URL);
            } else if (selectedProvider == GenAIProvider.DEEPSEEK) {
                providerLocationField.setText(DEEPSEEK_URL);
            } else if (selectedProvider == GenAIProvider.GROQ) {
                providerLocationField.setText(new GroqModelFetcher().getAPIUrl());
            } else {
                providerLocationField.setText("");
            }
            providerLocationField.setVisible(true);
            providerLocationPane.setVisible(true);
        } else if (selectedProvider == GenAIProvider.GOOGLE
                || selectedProvider == GenAIProvider.OPEN_AI
                || selectedProvider == GenAIProvider.MISTRAL
                || selectedProvider == GenAIProvider.ANTHROPIC) {
            apiKeyLabel.setVisible(true);
            apiKeyField.setVisible(true);
            apiKeyPane.setVisible(true);
            providerLocationLabel.setVisible(false);
            providerLocationField.setText("");
            providerLocationField.setVisible(false);
            providerLocationPane.setVisible(false);
        } else if (selectedProvider == GenAIProvider.COPILOT_PROXY) {
            apiKeyLabel.setVisible(false);
            apiKeyField.setVisible(false);
            apiKeyPane.setVisible(false);
            providerLocationLabel.setVisible(false);
            providerLocationField.setVisible(false);
            providerLocationPane.setVisible(false);
        } else {
            apiKeyLabel.setVisible(false);
            apiKeyField.setVisible(false);
            apiKeyPane.setVisible(false);
            providerLocationLabel.setVisible(true);
            providerLocationField.setVisible(true);
            providerLocationPane.setVisible(true);

            if (null != selectedProvider) {
                switch (selectedProvider) {
                    case OLLAMA ->
                        providerLocationField.setText(new OllamaModelFetcher().getAPIUrl());
                    case LM_STUDIO ->
                        providerLocationField.setText(new LMStudioModelFetcher().getAPIUrl());
                    case GPT4ALL ->
                        providerLocationField.setText(new GPT4AllModelFetcher().getAPIUrl());
                }
            }
        }
        apiKeyField.setText(preferencesManager.getApiKey((GenAIProvider) providerComboBox.getSelectedItem()));
        if (apiKeyLabel.isVisible()
                && selectedProvider != null
                && !selectedProvider.getApiKeyUrl().isEmpty()) {
            String apiKeyUrl = selectedProvider.getApiKeyUrl();
            apiKeyInfo.setText("<html><a href=''>" + apiKeyUrl + "</a></html>");
            apiKeyInfo.setCursor(new Cursor(Cursor.HAND_CURSOR));
            apiKeyInfo.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    try {
                        Desktop.getDesktop().browse(new URI(apiKeyUrl));
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    apiKeyInfo.setText("<html><a href=''><span style='color:blue;'>" + apiKeyUrl + "</span></a></html>");
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    apiKeyInfo.setText("<html><a href=''>" + apiKeyUrl + "</a></html>");
                }
            });
        }
        if (selectedProvider != null
                && !selectedProvider.getModelInfoUrl().isEmpty()) {
            String modelInfoUrl = selectedProvider.getModelInfoUrl();
            modelsInfo.setText("<html><a href=''>" + modelInfoUrl + "</a></html>");
            modelsInfo.setCursor(new Cursor(Cursor.HAND_CURSOR));
            modelsInfo.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    try {
                        Desktop.getDesktop().browse(new URI(modelInfoUrl));
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    modelsInfo.setText("<html><a href=''><span style='color:blue;'>" + modelInfoUrl + "</span></a></html>");
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    modelsInfo.setText("<html><a href=''>" + modelInfoUrl + "</a></html>");
                }
            });
        }
        if (selectedProvider != null) {
            updateModelComboBox(selectedProvider);
        }
        RunCopilotProxy proxy = Lookup.getDefault().lookup(RunCopilotProxy.class);
        if (selectedProvider == GenAIProvider.COPILOT_PROXY) {
            if (!proxy.isRunning()) {
                proxy.startProxy((e) -> {
                    updateModelComboBox(selectedProvider);
                });
            }
        } else {
            if (proxy.isRunning()) {
                proxy.closeProxy();
            }
        }
        providerSettings();
    }//GEN-LAST:event_providerComboBoxActionPerformed

    private void providerSettings() {
        GenAIProvider selectedProvider = (GenAIProvider) providerComboBox.getSelectedItem();
        repeatPenaltyPane.setVisible(false);
        organizationIdPane.setVisible(false);
        topKPane.setVisible(false);
        maxTokensPane.setVisible(false);
        maxCompletionTokensPane.setVisible(false);
        maxOutputTokensPane.setVisible(false);
        presencePenaltyPane.setVisible(false);
        frequencyPenaltyPane.setVisible(false);
        repeatPenaltyPane.setVisible(false);
        seedPane.setVisible(false);
        allowCodeExecution.setVisible(false);
        includeCodeExecutionOutput.setVisible(false);
        maxRetriesPane.setVisible(false);
        if (selectedProvider == GenAIProvider.GOOGLE) {
            topKPane.setVisible(true);
            maxOutputTokensPane.setVisible(true);
            allowCodeExecution.setVisible(true);
            includeCodeExecutionOutput.setVisible(true);
            maxRetriesPane.setVisible(true);
        }
        if (selectedProvider == GenAIProvider.OPEN_AI
                || selectedProvider == GenAIProvider.CUSTOM_OPEN_AI
                || selectedProvider == GenAIProvider.COPILOT_PROXY) {
            organizationIdPane.setVisible(true);
            maxTokensPane.setVisible(true);
            maxCompletionTokensPane.setVisible(true);
            presencePenaltyPane.setVisible(true);
            frequencyPenaltyPane.setVisible(true);
            seedPane.setVisible(true);
        }
        if (selectedProvider == GenAIProvider.OLLAMA) {
            repeatPenaltyPane.setVisible(true);
            topKPane.setVisible(true);
            seedPane.setVisible(true);
        }
    }
    private void classContextInlineHintComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classContextInlineHintComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_classContextInlineHintComboBoxActionPerformed

    private void enableInlineHintCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableInlineHintCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enableInlineHintCheckBoxActionPerformed

    private void timeoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeoutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeoutActionPerformed

    private void allowCodeExecutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allowCodeExecutionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_allowCodeExecutionActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Import Preferences");
        int userSelection = fileChooser.showOpenDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            java.io.File fileToImport = fileChooser.getSelectedFile();
            try {
                preferencesManager.importPreferences(fileToImport.getAbsolutePath());
                JOptionPane.showMessageDialog(this, "Preferences imported successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                load();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Failed to import preferences:\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_importButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter xmlFilter = new FileNameExtensionFilter("XML files", "xml");
        fileChooser.setFileFilter(xmlFilter);
        fileChooser.setDialogTitle("Export Preferences");
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            java.io.File fileToSave = fileChooser.getSelectedFile();
            try {
                preferencesManager.exportPreferences(fileToSave.getAbsolutePath());
                JOptionPane.showMessageDialog(this, "Preferences exported successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Failed to export preferences:\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    private void conversationContextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conversationContextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_conversationContextActionPerformed

    private void updateModelComboBox(GenAIProvider selectedProvider) {
        modelComboBox.removeAllItems();
        for (String model : getModelList(selectedProvider)) {
            modelComboBox.addItem(model);
        }
        if (modelComboBox.getItemCount() > 0) {
            modelComboBox.setSelectedIndex(0);
        }
    }

    private List<String> getModelList(GenAIProvider selectedProvider) {
        if (selectedProvider == GenAIProvider.OLLAMA
                && !providerLocationField.getText().isEmpty()) {
            OllamaModelFetcher fetcher = new OllamaModelFetcher();
            return fetcher.fetchModelNames(providerLocationField.getText());
        } else if (selectedProvider == GenAIProvider.LM_STUDIO
                && !providerLocationField.getText().isEmpty()) {
            LMStudioModelFetcher fetcher = new LMStudioModelFetcher();
            return fetcher.fetchModelNames(providerLocationField.getText());
        } else if (selectedProvider == GenAIProvider.GPT4ALL
                && !providerLocationField.getText().isEmpty()) {
            GPT4AllModelFetcher fetcher = new GPT4AllModelFetcher();
            return fetcher.fetchModelNames(providerLocationField.getText());
        } else if (selectedProvider == GenAIProvider.COPILOT_PROXY) {
            GPT4AllModelFetcher fetcher = new GPT4AllModelFetcher();
            return fetcher.fetchModelNames(DEFAULT_COPILOT_PROVIDER_LOCATION);
        } else if (selectedProvider == GenAIProvider.GROQ
                && !providerLocationField.getText().isEmpty()) {
            GroqModelFetcher fetcher = new GroqModelFetcher();
            return fetcher.fetchModels(providerLocationField.getText(), new String(apiKeyField.getPassword()));
        }
        return MODELS.values().stream()
                .filter(model -> model.getProvider().equals(selectedProvider))
                .map(GenAIModel::getName)
                .collect(Collectors.toList());
    }

    private GenAIModel getModel(String modelName) {
        return MODELS.get(modelName);
    }

    private final PreferencesManager preferencesManager = PreferencesManager.getInstance();

    void load() {
        aiAssistantActivationCheckBox.setSelected(preferencesManager.isAiAssistantActivated());
        classContextComboBox.setSelectedItem(preferencesManager.getClassContext());
        varContextComboBox.setSelectedItem(preferencesManager.getVarContext());
        classContextInlineHintComboBox.setSelectedItem(preferencesManager.getClassContextInlineHint());
        enableInlineHintCheckBox.setSelected(preferencesManager.isInlineHintEnabled());
        enableInlinePromptHintCheckBox.setSelected(preferencesManager.isInlinePromptHintEnabled());
        enableHintsCheckBox.setSelected(preferencesManager.isHintsEnabled());
        enableSmartCodeCheckBox.setSelected(preferencesManager.isSmartCodeEnabled());

        if (preferencesManager.getTemperature() != Double.MIN_VALUE) {
            temperature.setText(String.valueOf(preferencesManager.getTemperature()));
        }
        if (preferencesManager.getMaxTokens() != Integer.MIN_VALUE) {
            maxTokens.setText(String.valueOf(preferencesManager.getMaxTokens()));
        }
        if (preferencesManager.getTopP() != Double.MIN_VALUE) {
            topP.setText(String.valueOf(preferencesManager.getTopP()));
        }
        if (preferencesManager.getPresencePenalty() != Double.MIN_VALUE) {
            presencePenalty.setText(String.valueOf(preferencesManager.getPresencePenalty()));
        }
        if (preferencesManager.getFrequencyPenalty() != Double.MIN_VALUE) {
            frequencyPenalty.setText(String.valueOf(preferencesManager.getFrequencyPenalty()));
        }
        if (preferencesManager.getRepeatPenalty() != Double.MIN_VALUE) {
            repeatPenalty.setText(String.valueOf(preferencesManager.getRepeatPenalty()));
        }
        if (preferencesManager.getSeed() != Integer.MIN_VALUE) {
            seed.setText(String.valueOf(preferencesManager.getSeed()));
        }
        if (preferencesManager.getTopK() != Integer.MIN_VALUE) {
            topK.setText(String.valueOf(preferencesManager.getTopK()));
        }
        if (preferencesManager.getMaxCompletionTokens() != Integer.MIN_VALUE) {
            maxCompletionTokens.setText(String.valueOf(preferencesManager.getMaxCompletionTokens()));
        }
        if (preferencesManager.getMaxOutputTokens() != Integer.MIN_VALUE) {
            maxOutputTokens.setText(String.valueOf(preferencesManager.getMaxOutputTokens()));
        }
        if (preferencesManager.getMaxRetries() != Integer.MIN_VALUE) {
            maxRetries.setText(String.valueOf(preferencesManager.getMaxRetries()));
        }
        if (preferencesManager.getOrganizationId() != null) {
            organizationId.setText(String.valueOf(preferencesManager.getOrganizationId()));
        }

        allowCodeExecution.setSelected(preferencesManager.isAllowCodeExecution());
        includeCodeExecutionOutput.setSelected(preferencesManager.isIncludeCodeExecutionOutput());

        if (preferencesManager.getTimeout() != Integer.MIN_VALUE) {
            timeout.setText(String.valueOf(preferencesManager.getTimeout()));
        }
        logRequests.setSelected(preferencesManager.isLogRequestsEnabled());
        logResponses.setSelected(preferencesManager.isLogResponsesEnabled());
        stream.setSelected(preferencesManager.isStreamEnabled());

        if (!aiAssistantActivationCheckBox.isSelected()) {
            enableInlineHintCheckBox.setEnabled(false);
            enableInlinePromptHintCheckBox.setEnabled(false);
            enableHintsCheckBox.setEnabled(false);
            enableSmartCodeCheckBox.setEnabled(false);
        } else {
            enableInlineHintCheckBox.setEnabled(true);
            enableInlinePromptHintCheckBox.setEnabled(true);
            enableHintsCheckBox.setEnabled(true);
            enableSmartCodeCheckBox.setEnabled(true);
        }

        providerComboBox.setSelectedItem(preferencesManager.getProvider());
        modelComboBox.setSelectedItem(preferencesManager.getModel());
        ctrlSpaceRadioButton.setSelected(!preferencesManager.isCompletionAllQueryType());
        ctrlAltSpaceRadioButton.setSelected(preferencesManager.isCompletionAllQueryType());
        showDescriptionCheckBox.setSelected(preferencesManager.isDescriptionEnabled());
        fileExtField.setText(String.join(", ", preferencesManager.getFileExtensionListToInclude()));
        excludeJavadocCommentsCheckBox.setSelected(preferencesManager.isExcludeJavadocEnabled());
        defaultAIAssistantPlacement.setSelectedItem(preferencesManager.getChatPlacement());
        submitShortcut.setSelectedItem(preferencesManager.getSubmitShortcut());
        conversationContext.setSelectedItem(CONTEXT_OPTIONS.entrySet().stream()
                .filter(entry -> entry.getValue() == preferencesManager.getConversationContext())
                .map(Map.Entry::getKey)
                .findFirst()
                .orElse("Last 3 replies"));
        conversationContext.setSelectedItem(preferencesManager.getConversationContext());
        globalRules.setText(preferencesManager.getGlobalRules());

        GenAIProvider selectedProvider = (GenAIProvider) providerComboBox.getSelectedItem();
        if (selectedProvider == GenAIProvider.CUSTOM_OPEN_AI
                || selectedProvider == GenAIProvider.DEEPINFRA
                || selectedProvider == GenAIProvider.DEEPSEEK
                || selectedProvider == GenAIProvider.GROQ) {
            apiKeyField.setText(preferencesManager.getApiKey(true));
            providerLocationField.setText(preferencesManager.getProviderLocation());
        } else if (selectedProvider == GenAIProvider.GOOGLE
                || selectedProvider == GenAIProvider.OPEN_AI
                || selectedProvider == GenAIProvider.MISTRAL
                || selectedProvider == GenAIProvider.ANTHROPIC) {
            apiKeyField.setText(preferencesManager.getApiKey(true));
        } else if (selectedProvider == GenAIProvider.OLLAMA
                || selectedProvider == GenAIProvider.LM_STUDIO
                || selectedProvider == GenAIProvider.GPT4ALL) {
            providerLocationField.setText(preferencesManager.getProviderLocation());
        }
        providerSettings();
    }

    void store() {
        preferencesManager.setAiAssistantActivated(aiAssistantActivationCheckBox.isSelected());
        preferencesManager.setClassContext((AIClassContext) classContextComboBox.getSelectedItem());
        preferencesManager.setVarContext((AIClassContext) varContextComboBox.getSelectedItem());
        preferencesManager.setClassContextInlineHint((AIClassContext) classContextInlineHintComboBox.getSelectedItem());
        preferencesManager.setProvider((GenAIProvider) providerComboBox.getSelectedItem());
        preferencesManager.setModel((String) modelComboBox.getSelectedItem());
        preferencesManager.setInlineHintEnabled(enableInlineHintCheckBox.isSelected());
        preferencesManager.setInlinePromptHintEnabled(enableInlinePromptHintCheckBox.isSelected());
        preferencesManager.setHintsEnabled(enableHintsCheckBox.isSelected());
        preferencesManager.setSmartCodeEnabled(enableSmartCodeCheckBox.isSelected());
        preferencesManager.setCompletionAllQueryType(ctrlAltSpaceRadioButton.isSelected());
        preferencesManager.setDescriptionEnabled(showDescriptionCheckBox.isSelected());
        preferencesManager.setFileExtensionToInclude(fileExtField.getText());
        preferencesManager.setExcludeDirs(getCommaSeparatedValues(excludeTableModel));
        preferencesManager.setCustomHeaders(getHeaderTableModelValues());
        preferencesManager.setPrompts(getPromptModelValues());
        preferencesManager.setExcludeJavadocEnabled(excludeJavadocCommentsCheckBox.isSelected());
        preferencesManager.setChatPlacement((String) defaultAIAssistantPlacement.getSelectedItem());
        preferencesManager.setSubmitShortcut((String) submitShortcut.getSelectedItem());
        preferencesManager.setConversationContext(CONTEXT_OPTIONS.get((String) conversationContext.getSelectedItem()));
        preferencesManager.setGlobalRules(globalRules.getText());

        if (!temperature.getText().isEmpty()) {
            preferencesManager.setTemperature(Double.parseDouble(temperature.getText()));
        } else {
            preferencesManager.setTemperature(Double.MIN_VALUE);
        }
        if (!maxTokens.getText().isEmpty()) {
            preferencesManager.setMaxTokens(Integer.parseInt(maxTokens.getText()));
        } else {
            preferencesManager.setMaxTokens(Integer.MIN_VALUE);
        }
        if (!topP.getText().isEmpty()) {
            preferencesManager.setTopP(Double.parseDouble(topP.getText()));
        } else {
            preferencesManager.setTopP(Double.MIN_VALUE);
        }
        if (!presencePenalty.getText().isEmpty()) {
            preferencesManager.setPresencePenalty(Double.parseDouble(presencePenalty.getText()));
        } else {
            preferencesManager.setPresencePenalty(Double.MIN_VALUE);
        }
        if (!frequencyPenalty.getText().isEmpty()) {
            preferencesManager.setFrequencyPenalty(Double.parseDouble(frequencyPenalty.getText()));
        } else {
            preferencesManager.setFrequencyPenalty(Double.MIN_VALUE);
        }
        if (!repeatPenalty.getText().isEmpty()) {
            preferencesManager.setRepeatPenalty(Double.parseDouble(repeatPenalty.getText()));
        } else {
            preferencesManager.setRepeatPenalty(Double.MIN_VALUE);
        }
        if (!seed.getText().isEmpty()) {
            preferencesManager.setSeed(Integer.parseInt(seed.getText()));
        } else {
            preferencesManager.setSeed(Integer.MIN_VALUE);
        }
        if (!topK.getText().isEmpty()) {
            preferencesManager.setTopK(Integer.parseInt(topK.getText()));
        } else {
            preferencesManager.setTopK(Integer.MIN_VALUE);
        }
        if (!maxCompletionTokens.getText().isEmpty()) {
            preferencesManager.setMaxCompletionTokens(Integer.parseInt(maxCompletionTokens.getText()));
        } else {
            preferencesManager.setMaxCompletionTokens(Integer.MIN_VALUE);
        }
        if (!maxOutputTokens.getText().isEmpty()) {
            preferencesManager.setMaxOutputTokens(Integer.parseInt(maxOutputTokens.getText()));
        } else {
            preferencesManager.setMaxOutputTokens(Integer.MIN_VALUE);
        }
        if (!maxRetries.getText().isEmpty()) {
            preferencesManager.setMaxRetries(Integer.parseInt(maxRetries.getText()));
        } else {
            preferencesManager.setMaxRetries(Integer.MIN_VALUE);
        }
        if (!organizationId.getText().isEmpty()) {
            preferencesManager.setOrganizationId(organizationId.getText());
        } else {
            preferencesManager.setOrganizationId("");
        }
        if (!timeout.getText().isEmpty()) {
            preferencesManager.setTimeout(Integer.parseInt(timeout.getText()));
        } else {
            preferencesManager.setTimeout(Integer.MIN_VALUE);
        }
        preferencesManager.setAllowCodeExecution(allowCodeExecution.isSelected());
        preferencesManager.setIncludeCodeExecutionOutput(includeCodeExecutionOutput.isSelected());
        preferencesManager.setLogRequestsEnabled(logRequests.isSelected());
        preferencesManager.setLogResponsesEnabled(logResponses.isSelected());
        preferencesManager.setStreamEnabled(stream.isSelected());

        GenAIProvider selectedProvider = (GenAIProvider) providerComboBox.getSelectedItem();
        if (selectedProvider == GenAIProvider.CUSTOM_OPEN_AI
                || selectedProvider == GenAIProvider.DEEPINFRA
                || selectedProvider == GenAIProvider.DEEPSEEK
                || selectedProvider == GenAIProvider.GROQ) {
            preferencesManager.setApiKey(new String(apiKeyField.getPassword()));
            preferencesManager.setProviderLocation(providerLocationField.getText());
        } else if (selectedProvider == GenAIProvider.GOOGLE
                || selectedProvider == GenAIProvider.OPEN_AI
                || selectedProvider == GenAIProvider.MISTRAL
                || selectedProvider == GenAIProvider.ANTHROPIC) {
            preferencesManager.setApiKey(new String(apiKeyField.getPassword()));
        } else if (selectedProvider == GenAIProvider.OLLAMA
                || selectedProvider == GenAIProvider.LM_STUDIO
                || selectedProvider == GenAIProvider.GPT4ALL) {
            preferencesManager.setProviderLocation(providerLocationField.getText());
        } else if (selectedProvider == GenAIProvider.COPILOT_PROXY) {
            //langchain4j does not support null API key, but copilot-api ignores it
            preferencesManager.setApiKey("Ignored");
            preferencesManager.setProviderLocation(DEFAULT_COPILOT_PROVIDER_LOCATION);
        }
    }

    private DefaultTableModel getExcludeTableModel() {
        excludeDirTable.setDefaultRenderer(Object.class, new CustomTableCellRenderer());
        List<String> excludeDirList = preferencesManager.getExcludeDirs();
        Object[][] excludeDirArray = new Object[excludeDirList.size()][1];

        for (int i = 0; i < excludeDirList.size(); i++) {
            excludeDirArray[i][0] = excludeDirList.get(i);
        }
        excludeTableModel = new DefaultTableModel(
                excludeDirArray,
                new String[]{
                    NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.excludeDir.text")
                }
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return true;
            }

            @Override
            public void setValueAt(Object aValue, int row, int column) {
                super.setValueAt(aValue, row, column);
                if (row == getRowCount() - 1 && !aValue.toString().isEmpty()) {
                    addRow(new Object[]{""});
                }
            }
        };

        addContextMenuToTable(excludeDirTable);
        return excludeTableModel;
    }

    private DefaultTableModel getHeaderKeyValueTableModel() {
        customHeadersTable.setDefaultRenderer(Object.class, new CustomTableCellRenderer());

        Map<String, String> headerKeyValueMap = preferencesManager.getCustomHeaders();
        Object[][] headerKeyValueArray = new Object[headerKeyValueMap.size() + 1][2]; // +1 for empty row

        int index = 0;
        for (Map.Entry<String, String> entry : headerKeyValueMap.entrySet()) {
            headerKeyValueArray[index][0] = entry.getKey();
            headerKeyValueArray[index][1] = entry.getValue();
            index++;
        }
        headerKeyValueArray[index][0] = "";
        headerKeyValueArray[index][1] = "";

        customHeadersTableModel = new DefaultTableModel(
                headerKeyValueArray,
                new String[]{
                    NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.headerKey.text"),
                    NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.headerValue.text")
                }
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return true;
            }

            @Override
            public void setValueAt(Object aValue, int row, int column) {
                super.setValueAt(aValue, row, column);

                // Automatically add a new row if editing the last row
                if (row == getRowCount() - 1 && !getValueAt(row, 0).toString().isEmpty() && !getValueAt(row, 1).toString().isEmpty()) {
                    addRow(new Object[]{"", ""});
                }
            }
        };

        addContextMenuToTable(customHeadersTable);
        return customHeadersTableModel;
    }

    private void addContextMenuToTable(JTable table) {
        JPopupMenu popupMenu = new JPopupMenu();
        JMenuItem deleteItem = new JMenuItem("Delete");

        deleteItem.addActionListener(e -> {
            int selectedRow = table.getSelectedRow();
            if (selectedRow != -1 && selectedRow < table.getRowCount() - 1) { // Prevent deleting the last empty row
                ((DefaultTableModel) table.getModel()).removeRow(selectedRow);
            }
        });

        popupMenu.add(deleteItem);

        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                showPopup(e);
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                showPopup(e);
            }

            private void showPopup(MouseEvent e) {
                if (e.isPopupTrigger() && table.rowAtPoint(e.getPoint()) >= 0) {
                    table.setRowSelectionInterval(table.rowAtPoint(e.getPoint()), table.rowAtPoint(e.getPoint())); // Select row
                    popupMenu.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });
    }

    private Map<String, String> getHeaderTableModelValues() {
        Map<String, String> map = new HashMap<>();
        for (int row = 0; row < customHeadersTableModel.getRowCount(); row++) {
            Object key = customHeadersTableModel.getValueAt(row, 0);
            Object value = customHeadersTableModel.getValueAt(row, 1);

            if (key != null && value != null && !key.toString().isEmpty()) {
                map.put(key.toString(), value.toString());
            }
        }
        return map;
    }

    private DefaultTableModel getPromptTableModel() {
        promptTable.setDefaultRenderer(Object.class, new CustomTableCellRenderer(true));

        Map<String, String> promptMap = preferencesManager.getPrompts();
        Object[][] headerKeyValueArray = new Object[promptMap.size() + 1][2]; // +1 for adding an empty row

        int index = 0;
        for (Map.Entry<String, String> entry : promptMap.entrySet()) {
            headerKeyValueArray[index][0] = entry.getKey();
            headerKeyValueArray[index][1] = entry.getValue();
            index++;
        }
        headerKeyValueArray[index][0] = "";
        headerKeyValueArray[index][1] = "";

        promptTableModel = new DefaultTableModel(
                headerKeyValueArray,
                new String[]{
                    NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.promptName.text"),
                    NbBundle.getMessage(AIAssistancePanel.class, "AIAssistancePanel.promptValue.text")
                }
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 0; // Only the first column is editable
            }

            @Override
            public void setValueAt(Object aValue, int row, int column) {
                super.setValueAt(aValue, row, column);

                // Automatically add a new row if editing the last row
                if (row == getRowCount() - 1 && !getValueAt(row, 0).toString().isEmpty() && !getValueAt(row, 1).toString().isEmpty()) {
                    addRow(new Object[]{"", ""});
                }
            }
        };

        SwingUtilities.invokeLater(() -> {
            TableColumnModel columnModel = promptTable.getColumnModel();
            int totalWidth = promptTable.getWidth();
            columnModel.getColumn(0).setPreferredWidth((int) (totalWidth * 0.2));
            columnModel.getColumn(1).setPreferredWidth((int) (totalWidth * 0.8));
        });

        // Add double-click listener to open popup for second column
        promptTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (SwingUtilities.isLeftMouseButton(e)) {
                    int row = promptTable.rowAtPoint(e.getPoint());
                    int column = promptTable.columnAtPoint(e.getPoint());

                    if (column == 1 && row >= 0) { // If second column is clicked
                        Object promptNameObj = promptTable.getModel().getValueAt(row, 0);
                        String promptName = (promptNameObj != null) ? promptNameObj.toString() : "";
                        openTextEditorPopup(promptName, row, column);
                    }
                }
            }
        });

        addContextMenuToTable(promptTable);
        return promptTableModel;
    }

    private void openTextEditorPopup(String promptName, int row, int column) {
        String currentValue = (String) promptTable.getValueAt(row, column);
        JTextArea textArea = new JTextArea(currentValue, 30, 90);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        String title = "Edit " + promptName + " Prompt Value";
        Map<String, String> systemPrompts = preferencesManager.getSystemPrompts();
        if (systemPrompts != null && systemPrompts.containsKey(promptName)) {
            title = " - System Prompt";
        }
        JScrollPane scrollPane = new JScrollPane(textArea);
        int option = JOptionPane.showConfirmDialog(
                null, scrollPane, title,
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (option == JOptionPane.OK_OPTION) {
            promptTable.setValueAt(textArea.getText(), row, column);
        }
    }

    private Map<String, String> getPromptModelValues() {
        Map<String, String> map = new HashMap<>();
        for (int row = 0; row < promptTableModel.getRowCount(); row++) {
            Object key = promptTableModel.getValueAt(row, 0);
            Object value = promptTableModel.getValueAt(row, 1);

            if (key != null && value != null && !key.toString().isEmpty()) {
                map.put(key.toString(), value.toString());
            }
        }
        return map;
    }

    private String getCommaSeparatedValues(DefaultTableModel model) {
        StringBuilder sb = new StringBuilder();
        int rowCount = model.getRowCount();

        for (int i = 0; i < rowCount; i++) {
            Object value = model.getValueAt(i, 0); // Get the value from the first column
            if (value != null) {
                sb.append(value.toString());
                sb.append(", "); // Append a comma and space except for the last element
            }
        }

        return sb.toString();
    }

    static class CustomTableCellRenderer extends DefaultTableCellRenderer {

        private boolean highLightPrompts;

        public CustomTableCellRenderer() {
        }

        public CustomTableCellRenderer(boolean highLightPrompts) {
            this.highLightPrompts = highLightPrompts;
        }

        private final PreferencesManager preferencesManager = PreferencesManager.getInstance();
        private final Color bgColor = getBackgroundColorFromMimeType(MIME_PLAIN_TEXT);
        private final Color fgColor = getTextColorFromMimeType(MIME_PLAIN_TEXT);
        boolean isDark = ColorUtil.isDarkColor(bgColor);

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            // Get the default component
            Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            if (cell != null) {
                if (cell instanceof JComponent) {
                    JComponent jComponent = (JComponent) cell;
                    jComponent.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, new Color(225, 225, 225)));  // Red border as an example
                }
                if (highLightPrompts && !isSelected) {
                    cell.setBackground(bgColor);
                    cell.setForeground(fgColor);
                    if (table.getModel() instanceof DefaultTableModel) {
                        Object firstColumnValue = table.getModel().getValueAt(row, 0);
                        if (firstColumnValue != null) {
                            Map<String, String> systemPrompts = preferencesManager.getSystemPrompts();
                            if (column == 0 && systemPrompts != null && systemPrompts.containsKey(firstColumnValue.toString())) {
                                cell.setBackground(isDark ? lighten(bgColor, .1f) : darken(bgColor, .1f));
                                cell.setForeground(isDark ? darken(fgColor, .1f) : lighten(fgColor, .1f));
                            }
                        }
                    }
                }
            }
            return cell;
        }
    }

    boolean valid() {
        return true;
    }

    private void updateColorsForTheme() {
        // Get background and foreground colors based on MIME type or current editor theme
        Color bgColor = getBackgroundColorFromMimeType(MIME_PLAIN_TEXT);
        Color fgColor = getTextColorFromMimeType(MIME_PLAIN_TEXT);
        boolean isDark = ColorUtil.isDarkColor(bgColor);

        // Set combo boxes
        Color comboBg = bgColor;
        Color comboFg = fgColor;

        // Optionally adjust colors for combo boxes if needed
        // comboBg = isDark ? Color.DARK_GRAY : Color.WHITE;
        // comboFg = isDark ? Color.LIGHT_GRAY : Color.BLACK;
        // Example for providerComboBox and modelComboBox
        providerComboBox.setBackground(comboBg);
        providerComboBox.setForeground(comboFg);
        modelComboBox.setBackground(comboBg);
        modelComboBox.setForeground(comboFg);
        defaultAIAssistantPlacement.setBackground(comboBg);
        defaultAIAssistantPlacement.setForeground(comboFg);
        submitShortcut.setBackground(comboBg);
        submitShortcut.setForeground(comboFg);
        conversationContext.setBackground(comboBg);
        conversationContext.setForeground(comboFg);
        classContextComboBox.setBackground(comboBg);
        classContextComboBox.setForeground(comboFg);
        varContextComboBox.setBackground(comboBg);
        varContextComboBox.setForeground(comboFg);
        classContextInlineHintComboBox.setBackground(comboBg);
        classContextInlineHintComboBox.setForeground(comboFg);

        // Set labels
        providerLabel.setForeground(fgColor);
        gptModelLabel.setForeground(fgColor);
        providerLocationLabel.setForeground(fgColor);
        apiKeyLabel.setForeground(fgColor);
        temperatureLabel.setForeground(fgColor);
        timeoutLabel.setForeground(fgColor);
        topPLabel.setForeground(fgColor);
        maxRetriesLabel.setForeground(fgColor);
        maxOutputTokensLabel.setForeground(fgColor);
        repeatPenaltyLabel.setForeground(fgColor);
        seedLabel.setForeground(fgColor);
        maxTokensLabel.setForeground(fgColor);
        maxCompletionTokensLabel.setForeground(fgColor);
        topKLabel.setForeground(fgColor);
        presencePenaltyLabel.setForeground(fgColor);
        frequencyPenaltyLabel.setForeground(fgColor);
        organizationIdLabel.setForeground(fgColor);
        fileExtLabel.setForeground(fgColor);
        defaultAIAssistantPlacementLabel.setForeground(fgColor);
        classContextLabel.setForeground(fgColor);
        varContextLabel.setForeground(fgColor);
        classContextLabel1.setForeground(fgColor);
        aiInlineCompletionShortcutLabel.setForeground(fgColor);
        gptModelHelp.setForeground(isDark ? lighten(fgColor, 0.3f) : darken(fgColor, 0.3f));
        classContextHelp.setForeground(isDark ? lighten(fgColor, 0.3f) : darken(fgColor, 0.3f));
        varContextHelp.setForeground(isDark ? lighten(fgColor, 0.3f) : darken(fgColor, 0.3f));
        classContextHelp1.setForeground(isDark ? lighten(fgColor, 0.3f) : darken(fgColor, 0.3f));
        modelsInfo.setForeground(isDark ? lighten(fgColor, 0.3f) : darken(fgColor, 0.3f));
        apiKeyInfo.setForeground(isDark ? lighten(fgColor, 0.3f) : darken(fgColor, 0.3f));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane activationPane;
    private javax.swing.JLayeredPane activationParentPane;
    private javax.swing.JCheckBox aiAssistantActivationCheckBox;
    private javax.swing.ButtonGroup aiInlineCompletionShortcutGroup;
    private javax.swing.JLabel aiInlineCompletionShortcutLabel;
    private javax.swing.JCheckBox allowCodeExecution;
    private javax.swing.JPasswordField apiKeyField;
    private javax.swing.JLabel apiKeyInfo;
    private javax.swing.JLabel apiKeyLabel;
    private javax.swing.JLayeredPane apiKeyLabelPane;
    private javax.swing.JLayeredPane apiKeyPane;
    private javax.swing.JLayeredPane askAIPane;
    private javax.swing.JLayeredPane backupPane;
    private javax.swing.JLayeredPane cachePane;
    private javax.swing.JComboBox<AIClassContext> classContextComboBox;
    private javax.swing.JLabel classContextHelp;
    private javax.swing.JLabel classContextHelp1;
    private javax.swing.JComboBox<AIClassContext> classContextInlineHintComboBox;
    private javax.swing.JLayeredPane classContextInlineHintLabelPane;
    private javax.swing.JLayeredPane classContextInlineHintPane;
    private javax.swing.JLabel classContextLabel;
    private javax.swing.JLabel classContextLabel1;
    private javax.swing.JLayeredPane classContextLabelPane;
    private javax.swing.JLayeredPane classContextLabelPane1;
    private javax.swing.JLayeredPane classContextPane;
    private javax.swing.JButton cleanDataButton;
    private javax.swing.JLayeredPane commonSettingsParentPane1;
    private javax.swing.JComboBox<String> conversationContext;
    private javax.swing.JLabel conversationContextLabel;
    private javax.swing.JRadioButton ctrlAltSpaceRadioButton;
    private javax.swing.JRadioButton ctrlSpaceRadioButton;
    private javax.swing.JLayeredPane customHeadersPane;
    private javax.swing.JScrollPane customHeadersScrollPane;
    private javax.swing.JTable customHeadersTable;
    private javax.swing.JComboBox<String> defaultAIAssistantPlacement;
    private javax.swing.JLabel defaultAIAssistantPlacementLabel;
    private javax.swing.JCheckBox enableHintsCheckBox;
    private javax.swing.JCheckBox enableInlineHintCheckBox;
    private javax.swing.JCheckBox enableInlinePromptHintCheckBox;
    private javax.swing.JCheckBox enableSmartCodeCheckBox;
    private javax.swing.JTable excludeDirTable;
    private javax.swing.JCheckBox excludeJavadocCommentsCheckBox;
    private javax.swing.JButton exportButton;
    private javax.swing.JTextArea fileExtField;
    private javax.swing.JLabel fileExtLabel;
    private javax.swing.JLayeredPane fileFilterationPane;
    private javax.swing.JTextField frequencyPenalty;
    private javax.swing.JLabel frequencyPenaltyLabel;
    private javax.swing.JLayeredPane frequencyPenaltyPane;
    private javax.swing.JTextArea globalRules;
    private javax.swing.JLayeredPane globalRulesPane;
    private javax.swing.JScrollPane globalRulesScrollPane;
    private javax.swing.JLabel gptModelHelp;
    private javax.swing.JLabel gptModelLabel;
    private javax.swing.JButton importButton;
    private javax.swing.JCheckBox includeCodeExecutionOutput;
    private javax.swing.JLayeredPane inlineCompletionPane;
    private javax.swing.JLayeredPane inlineHintPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLayeredPane jLayeredPane4;
    private javax.swing.JLayeredPane jLayeredPane5;
    private javax.swing.JLayeredPane jLayeredPane6;
    private javax.swing.JLayeredPane jLayeredPane7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox logRequests;
    private javax.swing.JCheckBox logResponses;
    private javax.swing.JTextField maxCompletionTokens;
    private javax.swing.JLabel maxCompletionTokensLabel;
    private javax.swing.JLayeredPane maxCompletionTokensPane;
    private javax.swing.JTextField maxOutputTokens;
    private javax.swing.JLabel maxOutputTokensLabel;
    private javax.swing.JLayeredPane maxOutputTokensPane;
    private javax.swing.JTextField maxRetries;
    private javax.swing.JLabel maxRetriesLabel;
    private javax.swing.JLayeredPane maxRetriesPane;
    private javax.swing.JTextField maxTokens;
    private javax.swing.JLabel maxTokensLabel;
    private javax.swing.JLayeredPane maxTokensPane;
    private javax.swing.JLayeredPane modelChildPane;
    private javax.swing.JComboBox<String> modelComboBox;
    private javax.swing.JLayeredPane modelLabelPane;
    private javax.swing.JLayeredPane modelParentPane;
    private javax.swing.JLabel modelsInfo;
    private javax.swing.JLayeredPane openAISettingsParentPane1;
    private javax.swing.JTextField organizationId;
    private javax.swing.JLabel organizationIdLabel;
    private javax.swing.JLayeredPane organizationIdPane;
    private javax.swing.JTextField presencePenalty;
    private javax.swing.JLabel presencePenaltyLabel;
    private javax.swing.JLayeredPane presencePenaltyPane;
    private javax.swing.JScrollPane promptScrollPane;
    private javax.swing.JLayeredPane promptSettingsPane;
    private javax.swing.JTable promptTable;
    private javax.swing.JComboBox<io.github.jeddict.ai.settings.GenAIProvider> providerComboBox;
    private javax.swing.JLabel providerLabel;
    private javax.swing.JTextField providerLocationField;
    private javax.swing.JLabel providerLocationLabel;
    private javax.swing.JLayeredPane providerLocationPane;
    private javax.swing.JLayeredPane providerPane;
    private javax.swing.JLayeredPane providerParentPane;
    private javax.swing.JLayeredPane providerSettingsChildPane;
    private javax.swing.JLayeredPane providerSettingsPane;
    private javax.swing.JLayeredPane providerSettingsParentPane1;
    private javax.swing.JLayeredPane providerSettingsParentPane3;
    private javax.swing.JLayeredPane providersPane;
    private javax.swing.JTextField repeatPenalty;
    private javax.swing.JLabel repeatPenaltyLabel;
    private javax.swing.JLayeredPane repeatPenaltyPane;
    private javax.swing.JTextField seed;
    private javax.swing.JLabel seedLabel;
    private javax.swing.JLayeredPane seedPane;
    private javax.swing.JCheckBox showDescriptionCheckBox;
    private javax.swing.JLayeredPane snippetPane;
    private javax.swing.JLayeredPane snippetPane1;
    private javax.swing.JCheckBox stream;
    private javax.swing.JComboBox<String> submitShortcut;
    private javax.swing.JLabel submitShortcutLabel;
    private javax.swing.JTextField temperature;
    private javax.swing.JLabel temperatureLabel;
    private javax.swing.JLayeredPane temperaturePane;
    private javax.swing.JTextField timeout;
    private javax.swing.JLabel timeoutLabel;
    private javax.swing.JLayeredPane timeoutPane;
    private javax.swing.JTextField topK;
    private javax.swing.JLabel topKLabel;
    private javax.swing.JLayeredPane topKPane;
    private javax.swing.JTextField topP;
    private javax.swing.JLabel topPLabel;
    private javax.swing.JLayeredPane topPPane;
    private javax.swing.JComboBox<AIClassContext> varContextComboBox;
    private javax.swing.JLabel varContextHelp;
    private javax.swing.JLabel varContextLabel;
    private javax.swing.JLayeredPane varContextPane;
    // End of variables declaration//GEN-END:variables
}
